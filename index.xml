<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hoverzheng</title>
    <link>https://hoverzheng.github.io/</link>
    <description>Recent content on hoverzheng</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <managingEditor>zg_hover@sina.com (hoverzheng)</managingEditor>
    <webMaster>zg_hover@sina.com (hoverzheng)</webMaster>
    <lastBuildDate>Sat, 28 Jul 2018 06:30:36 +0800</lastBuildDate>
    
	<atom:link href="https://hoverzheng.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kafka设计原理-—性能上的设计考虑</title>
      <link>https://hoverzheng.github.io/post/technology-blog/bigdata/kafka%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86--%E6%80%A7%E8%83%BD%E4%B8%8A%E7%9A%84%E8%AE%BE%E8%AE%A1%E8%80%83%E8%99%91/</link>
      <pubDate>Sat, 28 Jul 2018 06:30:36 +0800</pubDate>
      <author>zg_hover@sina.com (hoverzheng)</author>
      <guid>https://hoverzheng.github.io/post/technology-blog/bigdata/kafka%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86--%E6%80%A7%E8%83%BD%E4%B8%8A%E7%9A%84%E8%AE%BE%E8%AE%A1%E8%80%83%E8%99%91/</guid>
      <description>概述 本文总结了Kafka的一些设计原则和思想。通过本文，可以了解，为什么kafka的读写性能如此之高，在设计时考虑了那些方面。 性能上的设计考</description>
    </item>
    
    <item>
      <title>如何通过REST接口访问fabric1.1网络</title>
      <link>https://hoverzheng.github.io/post/technology-blog/blockchain/%E9%80%9A%E8%BF%87rest%E6%8E%A5%E5%8F%A3%E8%AE%BF%E9%97%AEfabric%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Mon, 23 Jul 2018 19:37:36 +0800</pubDate>
      <author>zg_hover@sina.com (hoverzheng)</author>
      <guid>https://hoverzheng.github.io/post/technology-blog/blockchain/%E9%80%9A%E8%BF%87rest%E6%8E%A5%E5%8F%A3%E8%AE%BF%E9%97%AEfabric%E7%BD%91%E7%BB%9C/</guid>
      <description>概述 ​ 通过REST接口来访问区块链网络，可以屏蔽底层区块链网络的复杂性，减低开发Dapp的难度，快速开发基于区块链的应用。 ​ Fabric官方</description>
    </item>
    
    <item>
      <title>centos7.0安装hyperledger fabric-1.1环境(first network)</title>
      <link>https://hoverzheng.github.io/post/technology-blog/blockchain/fabric-1.1%E5%AE%89%E8%A3%85/</link>
      <pubDate>Wed, 18 Jul 2018 06:55:36 +0800</pubDate>
      <author>zg_hover@sina.com (hoverzheng)</author>
      <guid>https://hoverzheng.github.io/post/technology-blog/blockchain/fabric-1.1%E5%AE%89%E8%A3%85/</guid>
      <description>概述 在安装fabric时，对于依赖组件的安装，官方文档写的不是太有条理，导致很多初学者，在安装时遇到很多问题。 本文介绍了fabric在cen</description>
    </item>
    
    <item>
      <title>Goroutine Leak和解决之道</title>
      <link>https://hoverzheng.github.io/post/technology-blog/go/goroutine-leak%E5%92%8C%E8%A7%A3%E5%86%B3%E4%B9%8B%E9%81%93/</link>
      <pubDate>Mon, 16 Jul 2018 06:55:36 +0800</pubDate>
      <author>zg_hover@sina.com (hoverzheng)</author>
      <guid>https://hoverzheng.github.io/post/technology-blog/go/goroutine-leak%E5%92%8C%E8%A7%A3%E5%86%B3%E4%B9%8B%E9%81%93/</guid>
      <description>概述 在Go中，goroutine很轻量级，随便创建成千上万个goroutine不是问题，但要注意，要是这么多的goroutine一致递增，而</description>
    </item>
    
    <item>
      <title>Raft算法详解3—选主(Leader election)</title>
      <link>https://hoverzheng.github.io/post/technology-blog/blockchain/raft%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A33--%E9%80%89%E4%B8%BB/</link>
      <pubDate>Mon, 16 Apr 2018 06:40:36 +0640</pubDate>
      <author>zg_hover@sina.com (hoverzheng)</author>
      <guid>https://hoverzheng.github.io/post/technology-blog/blockchain/raft%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A33--%E9%80%89%E4%B8%BB/</guid>
      <description>Raft算法详解&amp;ndash;选主(Leader election) 概述 ​ 本文详细介绍了Raft算法的选主过程，包括：选主的流程，选主过程中各个节点的角色转换</description>
    </item>
    
    <item>
      <title>Raft算法详解1--Raft基础</title>
      <link>https://hoverzheng.github.io/post/technology-blog/blockchain/raft%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%951-raft%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Tue, 27 Mar 2018 06:55:36 +0800</pubDate>
      <author>zg_hover@sina.com (hoverzheng)</author>
      <guid>https://hoverzheng.github.io/post/technology-blog/blockchain/raft%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%951-raft%E5%9F%BA%E7%A1%80/</guid>
      <description>介绍 本文介绍了Raft协议的三种核心的角色和时间周期的概念，并说明了角色之间的转换过程。通过本文的学习，可以理解Raft共识算法的三种角色，</description>
    </item>
    
    <item>
      <title>Raft算法详解2--Raft算法概要</title>
      <link>https://hoverzheng.github.io/post/technology-blog/blockchain/raft%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A32--raft%E7%AE%97%E6%B3%95%E6%A6%82%E8%A7%88/</link>
      <pubDate>Tue, 27 Mar 2018 06:55:36 +0800</pubDate>
      <author>zg_hover@sina.com (hoverzheng)</author>
      <guid>https://hoverzheng.github.io/post/technology-blog/blockchain/raft%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A32--raft%E7%AE%97%E6%B3%95%E6%A6%82%E8%A7%88/</guid>
      <description>Raft算法介绍 Raft是一个共识算法，用来管理复制日志(replicated log)，关于复制日志后面有讲述。本文以简明形式总结了该算法，</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://hoverzheng.github.io/page/about/aboutme/</link>
      <pubDate>Sun, 18 Mar 2018 21:46:43 +0800</pubDate>
      <author>zg_hover@sina.com (hoverzheng)</author>
      <guid>https://hoverzheng.github.io/page/about/aboutme/</guid>
      <description>Introduce I am a graduate student and graduated from Southwest University of Science and Technology(西南科技大学) in in Mianyang City, Sichuan Province. My major is computer application and network security. blog CSDN Blog ChinaUnix Blog</description>
    </item>
    
    <item>
      <title>Memcached架构分析</title>
      <link>https://hoverzheng.github.io/post/technology-blog/architect/memcached%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 18 Mar 2018 20:52:36 +0800</pubDate>
      <author>zg_hover@sina.com (hoverzheng)</author>
      <guid>https://hoverzheng.github.io/post/technology-blog/architect/memcached%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/</guid>
      <description>介绍 本文通过阅读memcached的源代码，剖析了memcached的主流程处理的架构设计。包括主流程的线程模型和网络事件处理机制。 该架构通</description>
    </item>
    
  </channel>
</rss>